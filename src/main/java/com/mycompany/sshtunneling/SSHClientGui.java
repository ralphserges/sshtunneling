package com.mycompany.sshtunneling;

import com.mycompany.sshtunneling.sftp.SFTPGui;
import com.mycompany.sshtunneling.logging.LogController;
import com.mycompany.sshtunneling.scp.SCPCommandLine;

import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.Session;
import com.mycompany.sshtunneling.sftp.SFTPUtil;
import com.mycompany.sshtunneling.shell.ShellBoundary;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JFrame;

public class SSHClientGui extends javax.swing.JFrame {
    private SFTPGui sftpGui;
    private SCPCommandLine scpTerminal;
    private ShellBoundary shellGui;
    
    private boolean isSFTPGuiOn;
    private boolean isSCPTerminalOn;
    private boolean isShellGuiOn;
    
    public static Session session;
    public static ChannelSftp sftpChannel;
    
    public static final int LEVEL_INFO = 0;
    public static final int LEVEL_ERROR = 1;
    public static final int MAXIMUM_PORT_VALUE = 65535; //max port a packet can handle
    
    LogController logWriter = new LogController();
    
    public ArrayList<String> logMessage = new ArrayList<String>();
   
    public SSHClientGui() {
        initComponents();
    }
    
    public void setSFTPGui(SFTPGui sftpGui){
        this.sftpGui = sftpGui;
    }
    
    public void setSCPTerminal(SCPCommandLine scpTerminal){
        this.scpTerminal = scpTerminal;
    }
    
    public void setShellGui(ShellBoundary shellGui){
        this.shellGui = shellGui;
    }
    
    public void setIsSFTPOn(boolean isSFTPGuiOn){
        this.isSFTPGuiOn = isSFTPGuiOn;
    }
    
    public void setIsSCPTerminalOn(boolean isSCPTerminalOn){
        this.isSCPTerminalOn = isSCPTerminalOn;
    }
    
    public void setIsShellGuiOn(boolean isShellGuiOn){
        this.isShellGuiOn = isShellGuiOn;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        list1 = new java.awt.List();
        usernameLabel = new javax.swing.JLabel();
        hostUserNameTF = new javax.swing.JTextField();
        pwLabel = new javax.swing.JLabel();
        hostPasswordTF = new javax.swing.JPasswordField();
        programTitle = new javax.swing.JLabel();
        hosIPLabel = new javax.swing.JLabel();
        hostIpAddressTF = new javax.swing.JTextField();
        serverPortLabel = new javax.swing.JLabel();
        serverPortTF = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        sshClientConsole = new javax.swing.JTextArea();
        connectButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        sshServerPortLabel = new javax.swing.JLabel();
        sshServerPortTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        protocolComboBox = new javax.swing.JComboBox<>();
        helpButton = new javax.swing.JButton();
        productIcon = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Securias SSH Client");

        usernameLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        usernameLabel.setText("username:");

        hostUserNameTF.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        hostUserNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostUserNameTFActionPerformed(evt);
            }
        });

        pwLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        pwLabel.setText("password:");

        hostPasswordTF.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        programTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        programTitle.setText("SSH Tunneling GUI");

        hosIPLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        hosIPLabel.setText("host IP address:");

        hostIpAddressTF.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        hostIpAddressTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostIpAddressTFActionPerformed(evt);
            }
        });

        serverPortLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        serverPortLabel.setText("server port:");

        serverPortTF.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        serverPortTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverPortTFActionPerformed(evt);
            }
        });

        sshClientConsole.setEditable(false);
        sshClientConsole.setColumns(20);
        sshClientConsole.setRows(5);
        jScrollPane1.setViewportView(sshClientConsole);

        connectButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        exitButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        sshServerPortLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        sshServerPortLabel.setText("SSH server port:");

        sshServerPortTF.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        sshServerPortTF.setText("22");
        sshServerPortTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sshServerPortTFActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jLabel1.setText("include destinated server port you want local port forwarding to.");

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jLabel2.setText("default ssh server port listens on 22. you may change accordingly.");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("SSH Protocol:");

        protocolComboBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        protocolComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SCP", "SFTP", "SHELL" }));

        helpButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        productIcon.setIcon(new javax.swing.ImageIcon("C:\\Users\\xuchi_000\\Desktop\\sshtunneling\\small_securias.png")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(helpButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(connectButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(programTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(pwLabel)
                                            .addGap(18, 18, 18)
                                            .addComponent(hostPasswordTF, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(usernameLabel)
                                            .addGap(18, 18, 18)
                                            .addComponent(hostUserNameTF))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(productIcon)
                                .addGap(11, 11, 11)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(hosIPLabel)
                                .addGap(18, 18, 18)
                                .addComponent(hostIpAddressTF, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(serverPortLabel)
                                    .addGap(18, 18, 18)
                                    .addComponent(serverPortTF, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(sshServerPortLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(sshServerPortTF, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(241, 241, 241)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(protocolComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(programTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(usernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hostUserNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pwLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hostPasswordTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(productIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hosIPLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hostIpAddressTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverPortLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serverPortTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sshServerPortLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sshServerPortTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(protocolComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectButton)
                    .addComponent(exitButton)
                    .addComponent(helpButton))
                .addGap(124, 124, 124))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hostUserNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostUserNameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hostUserNameTFActionPerformed

    private void hostIpAddressTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostIpAddressTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hostIpAddressTFActionPerformed

    private void serverPortTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverPortTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serverPortTFActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        
        try
        {
            if(connectButton.getText().equalsIgnoreCase("connect")){
                // get user inputs
                String username = hostUserNameTF.getText();
                String password = String.valueOf(hostPasswordTF.getPassword());
                String ipaddress = hostIpAddressTF.getText(); //invalid ipadd is caught by SSHClient class

                int serverPort = 0;
                if(!serverPortTF.getText().isEmpty())
                    serverPort = Integer.parseInt(serverPortTF.getText());

                int sshServerPort = Integer.parseInt(sshServerPortTF.getText());

                //if either port is invalid, throw exception
                if(!isPortValid(serverPort) || !isPortValid(sshServerPort)){
                    throw new Exception("port_error");
                }

                //connect ssh client with ssh server
                this.session = SSHClient.getSSHSessionLPF(username,
                                                        password,
                                                        ipaddress,
                                                        serverPort,
                                                        sshServerPort,
                                                        this);

                if(this.session.isConnected()) {
                    
                    runChannel();
                    connectButton.setText("Disconnect");
                    
                }
            }
            else {
                safeExit();
                SSHClient.endSSHSession(this.session,this.sftpChannel, this);
                
                
                // change conenct button to connect button
                connectButton.setText("Connect");
            }
            
        }catch(Exception e) {
           // session creation fail print error to console write error cause to gui
           if(e.getMessage().equalsIgnoreCase("port_error")){
               writeToGuiConsole("Invalid Port number. Please Check port input fields.", SSHClientGui.LEVEL_ERROR);
           }else
               writeToGuiConsole("Invalid input type. Please Check input fields.", SSHClientGui.LEVEL_ERROR);
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    private void runChannel(){
        String selectedProtocol = String.valueOf(protocolComboBox.getSelectedItem());

        if(selectedProtocol.equals("SFTP")) {
            // if session is successfully created, create sftp channel using the session
            SFTPUtil sftpUtil = new SFTPUtil();
            this.sftpChannel = sftpUtil.getSFTPChannel(this.session, this);

            //if sftp is successfully created and connected, pop out sftp gui
            if(this.sftpChannel.isConnected()) {

                // display sftp gui
                SFTPGui.displaySFTPGui(this);
                
            }else {
                 writeToGuiConsole("SFTP Fail to create and connect", LEVEL_ERROR);
            }
        }
        else if(selectedProtocol.equals("SHELL")) {
            ShellBoundary.displayShellInterface(this);
            writeToGuiConsole("SHELL is open.", LEVEL_INFO);
            
        }else{
            SCPCommandLine.displaySCPCommandLine(this);
            writeToGuiConsole("SCP channel is created.", LEVEL_INFO);
        }
    }
    
    
    private void sshServerPortTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sshServerPortTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sshServerPortTFActionPerformed
    
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        
        // user click exit while ssh still connected
        if(this.session != null) {
            if(this.session.isConnected()){
                safeExit();
                SSHClient.endSSHSession(this.session,this.sftpChannel, this);
            } 
            //write to file here
            String[] logMessageArr = logMessage.stream()
                                            .map(String::new)
                                            .toArray(String[]::new);

            //return true when file is written sucessfully , otherwise false
            boolean logWriteStatus = logWriter.logWriterFunc(logMessageArr);
        }
        
        //once reach here, ssh is disconnected. ready to exit program
        //exit program
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        // TODO add your handling code here:
		// Button that opens browser and links to our FAQ page
        try {
            String url = "https://uowfyp21s1team24.wordpress.com/faq/";
            java.awt.Desktop.getDesktop().browse(java.net.URI.create(url));
            writeToGuiConsole("redirected to FAQ Page.", LEVEL_INFO);
        } catch (java.io.IOException e) {
            writeToGuiConsole("no internet connection found", LEVEL_ERROR);
        }
    }//GEN-LAST:event_helpButtonActionPerformed
    
    private void safeExit() {
        if(isSFTPGuiOn)
            sftpGui.dispose();
        if(isSCPTerminalOn){
            scpTerminal.dispose();
            writeToGuiConsole("SCP channel is closed", SSHClientGui.LEVEL_INFO);
        }
        if(isShellGuiOn) {
            shellGui.dispose();
            writeToGuiConsole("SHELL is closed", SSHClientGui.LEVEL_INFO);
        }
    }
    
    //this method checks for invalid port such that 
    // it is less than 0 or greater than MAXIMUM_PORT_VALUE
    public boolean isPortValid (int port) {
        if(port >= 0 && port <= MAXIMUM_PORT_VALUE){
            return true;
        }else {
            return false;
        }
    }
    
    public void writeToGuiConsole(String log, int logLevel) {
  
        StringBuilder message = new StringBuilder();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss ");
        
        // get timestamp
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        message.append(sdf.format(timestamp));
        
        // get loglevel
        switch(logLevel) {
            case LEVEL_INFO:
                message.append("[INFO] ");
                break;
            case LEVEL_ERROR:
                message.append("[ERROR] ");
                break;
        }
        
        // log ready to write to console 
        message.append(log);
        
        // get textarea
        sshClientConsole.append(message.toString() + "\n");
        // insert the message into the array
        logMessage.add(message.toString() + "\n");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SSHClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SSHClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SSHClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SSHClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SSHClientGui client = new SSHClientGui();
                client.setVisible(true);
                client.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                client.addWindowListener(new WindowAdapter(){
                    @Override
                    public void windowClosing(WindowEvent e){
                        if(SSHClientGui.session != null) {
                            if(SSHClientGui.session.isConnected()){
                                SSHClient.endSSHSession(SSHClientGui.session,SSHClientGui.sftpChannel, client);
                            }
                        }
                    }
                });
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton helpButton;
    private javax.swing.JLabel hosIPLabel;
    private javax.swing.JTextField hostIpAddressTF;
    private javax.swing.JPasswordField hostPasswordTF;
    private javax.swing.JTextField hostUserNameTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.List list1;
    private javax.swing.JLabel productIcon;
    private javax.swing.JLabel programTitle;
    private javax.swing.JComboBox<String> protocolComboBox;
    private javax.swing.JLabel pwLabel;
    private javax.swing.JLabel serverPortLabel;
    private javax.swing.JTextField serverPortTF;
    private javax.swing.JTextArea sshClientConsole;
    private javax.swing.JLabel sshServerPortLabel;
    private javax.swing.JTextField sshServerPortTF;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables
}
