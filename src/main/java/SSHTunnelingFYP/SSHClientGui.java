package SSHTunnelingFYP;

import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.Session;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;


public class SSHClientGui extends javax.swing.JFrame {
    private Session session;
    private ChannelSftp sftpChannel;
    public static final int LEVEL_INFO = 0;
    public static final int LEVEL_ERROR = 1;
    
   
    public SSHClientGui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usernameLabel = new javax.swing.JLabel();
        hostUserNameTF = new javax.swing.JTextField();
        pwLabel = new javax.swing.JLabel();
        hostPasswordTF = new javax.swing.JPasswordField();
        programTitle = new javax.swing.JLabel();
        hosIPLabel = new javax.swing.JLabel();
        hostIpAddressTF = new javax.swing.JTextField();
        serverPortLabel = new javax.swing.JLabel();
        serverPortTF = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        sshClientConsole = new javax.swing.JTextArea();
        connectButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        sshServerPortLabel = new javax.swing.JLabel();
        sshServerPortTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        usernameLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        usernameLabel.setText("username:");

        hostUserNameTF.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        hostUserNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostUserNameTFActionPerformed(evt);
            }
        });

        pwLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        pwLabel.setText("password:");

        hostPasswordTF.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        programTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        programTitle.setText("SSH Tunneling GUI");

        hosIPLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        hosIPLabel.setText("host IP address:");

        hostIpAddressTF.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        hostIpAddressTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostIpAddressTFActionPerformed(evt);
            }
        });

        serverPortLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        serverPortLabel.setText("server port:");

        serverPortTF.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        serverPortTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverPortTFActionPerformed(evt);
            }
        });

        sshClientConsole.setEditable(false);
        sshClientConsole.setColumns(20);
        sshClientConsole.setRows(5);
        jScrollPane1.setViewportView(sshClientConsole);

        connectButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        exitButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        sshServerPortLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        sshServerPortLabel.setText("SSH server port:");

        sshServerPortTF.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        sshServerPortTF.setText("22");
        sshServerPortTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sshServerPortTFActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jLabel1.setText("include destinated server port you want local port forwarding to.");

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jLabel2.setText("default ssh server port listens on 22. you may change accordingly.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addComponent(connectButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(145, 145, 145))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pwLabel)
                                .addGap(18, 18, 18)
                                .addComponent(hostPasswordTF, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(usernameLabel)
                                .addGap(18, 18, 18)
                                .addComponent(hostUserNameTF))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(hosIPLabel)
                        .addGap(18, 18, 18)
                        .addComponent(hostIpAddressTF, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(sshServerPortLabel)
                                .addGap(18, 18, 18)
                                .addComponent(sshServerPortTF, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(serverPortLabel)
                                .addGap(18, 18, 18)
                                .addComponent(serverPortTF, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(programTitle)
                .addGap(257, 257, 257))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(programTitle)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hostUserNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pwLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hostPasswordTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hosIPLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hostIpAddressTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverPortLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serverPortTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sshServerPortLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sshServerPortTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectButton)
                    .addComponent(exitButton))
                .addGap(54, 54, 54))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hostUserNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostUserNameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hostUserNameTFActionPerformed

    private void hostIpAddressTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostIpAddressTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hostIpAddressTFActionPerformed

    private void serverPortTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverPortTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serverPortTFActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        
        if(connectButton.getText().equalsIgnoreCase("connect")){
            
            // get user inputs
            String username = hostUserNameTF.getText();
            String password = String.valueOf(hostPasswordTF.getPassword());
            String ipaddress = hostIpAddressTF.getText();
            
            int serverPort = 0;
            if(!serverPortTF.getText().isEmpty())
                serverPort = Integer.parseInt(serverPortTF.getText());
            
            int sshServerPort = Integer.parseInt(sshServerPortTF.getText());

            //connect ssh client with ssh server
            this.session = SSHClient.getSSHSessionLPF(username,
                                                    password,
                                                    ipaddress,
                                                    serverPort,
                                                    sshServerPort,
                                                    this);
            
            if(this.session != null) {
                
                // if session is successfully created, create sftp channel using the session
                this.sftpChannel = SSHClient.getSFTPChannel(this.session, this);
                
                //if sftp is successfully created, pop out sftp gui
                if(this.sftpChannel != null) {
                    
                    // display sftp gui
                    SFTPGui.displaySFTPGui();
                    
                    
                }else {
                     writeToGuiConsole("SFTP Fail to create and connect", LEVEL_ERROR);
                }
                
                // regardless sftp successfully created or not, we are still connected to SSH server. 
                // if sftp fail, user can still local port forward but NOT file trasnfer
                // provided that user fill in the server port field
                connectButton.setText("Disconnect");
                
            }
        }
        else {
            // user click "disconnect"
            SSHClient.endSSHSession(this.session,this.sftpChannel, this);
            
            // change conenct button to connect button
            connectButton.setText("Connect");
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    private void sshServerPortTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sshServerPortTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sshServerPortTFActionPerformed
    
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        
        // user click exit while ssh still connected
        if(this.session != null && connectButton.getText().equalsIgnoreCase("Disconnect")){
            SSHClient.endSSHSession(this.session,this.sftpChannel, this);
        } 
        
        //once reach here, ssh is disconnected. ready to exit program
        //exit program
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed
    
    
    public void writeToGuiConsole(String log, int logLevel) {
  
        StringBuilder message = new StringBuilder();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss ");
        
        // get timestamp
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        message.append(sdf.format(timestamp));
        
        // get loglevel
        switch(logLevel) {
            case LEVEL_INFO:
                message.append("[INFO] ");
                break;
            case LEVEL_ERROR:
                message.append("[ERROR] ");
                break;
        }
        
        // log ready to write to console 
        message.append(log);
        
        // get textarea
        sshClientConsole.append(message.toString() + "\n");
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SSHClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SSHClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SSHClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SSHClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new SSHClientGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel hosIPLabel;
    private javax.swing.JTextField hostIpAddressTF;
    private javax.swing.JPasswordField hostPasswordTF;
    private javax.swing.JTextField hostUserNameTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel programTitle;
    private javax.swing.JLabel pwLabel;
    private javax.swing.JLabel serverPortLabel;
    private javax.swing.JTextField serverPortTF;
    private javax.swing.JTextArea sshClientConsole;
    private javax.swing.JLabel sshServerPortLabel;
    private javax.swing.JTextField sshServerPortTF;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables
}
